version: 2.1
parameters:
  pact-webhook:
    type: boolean
    default: false
  pact-consumer-name:
    type: string
    default: "default"
  pact-url:
    type: string
    default: "default"

executors:
  docker:
    docker:
      - image: cimg/openjdk:17.0.1
        auth:
          username: nathandeamer
          password: $DOCKERHUB_PASSWORD

commands:
  download-pact-cli:
    description: "Download pact"
    steps:
      - run:
          name: Download pact cli
          command: |
            curl -LO https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v1.88.83/pact-1.88.83-linux-x86_64.tar.gz
            tar xzf pact-1.88.83-linux-x86_64.tar.gz

jobs:
  build:
    executor: docker
    environment:
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false"
    steps:
      - checkout
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Run tests
          command: |
            ./gradlew test
      - run:
          name: Run Consumer Pact tests
          command: |
            ./gradlew pactTest --tests *ConsumerPactTest
      - download-pact-cli
      - run:
          name: Publish Consumer Pacts
          command: |
            if [ -d build/pacts ]
            then
              ./pact/bin/pact-broker publish build/pacts --consumer-app-version=$CIRCLE_SHA1 --branch=$CIRCLE_BRANCH --tag-with-git-branch
            else
              echo "No Consumer Pacts found. Continuing...."
            fi
      - run:
          name: Run Provider Pact tests # Remember: A microservice can be a consumer and a provider. # Always publish the results from pipeline
          command: |
              ./gradlew pactTest -DpactPublishResults=true --tests *ProviderPactTest
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - store_test_results:
          # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: build/test-results/test
      - store_artifacts: # Upload test results for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: build/test-results/test
      - store_artifacts:
          path: build/pacts

  build-pact-provider-only:
    executor: docker
    environment:
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false"
    steps:
      - checkout
      - download-pact-cli
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Run Provider Pact tests # Remember: A microservice can be a consumer and a provider. # Always publish the results from pipeline
          command: |
              ./gradlew pactTest -DpactPublishResults=true -Dpact.filter.consumers=<< pipeline.parameters.pact-consumer-name >> -Dpact.filter.pacturl=<< pipeline.parameters.pact-url >> --tests *ProviderPactTest

  can-i-deploy:
    executor: docker
    steps:
      - download-pact-cli
      - run:
          name: Can I deploy?
          command: |
            ./pact/bin/pact-broker can-i-deploy --pacticipant=$CIRCLE_PROJECT_REPONAME --version=$CIRCLE_SHA1

  can-i-deploy-dev:
    executor: docker
    steps:
      - download-pact-cli
      - run:
          name: Can I deploy to dev?
          command: |
            ./pact/bin/pact-broker can-i-deploy --pacticipant=$CIRCLE_PROJECT_REPONAME --version=$CIRCLE_SHA1 --to-environment=dev

  deploy-to-dev:
    executor: docker
    steps:
      - run:
          name: Deploy to dev
          command: |
            echo "Simulating deploying to dev environment"
            ./pact/bin/pact-broker record-deployment --pacticipant=$CIRCLE_PROJECT_REPONAME --version=$CIRCLE_SHA1 --environment=dev

  can-i-deploy-staging:
    executor: docker
    steps:
      - download-pact-cli
      - run:
          name: Can I deploy to staging?
          command: |
            ./pact/bin/pact-broker can-i-deploy --pacticipant=$CIRCLE_PROJECT_REPONAME --version=$CIRCLE_SHA1 --to-environment=staging

  deploy-to-staging:
    executor: docker
    steps:
      - run:
          name: Deploy to staging
          command: |
            echo "Simulating deploying to dev environment"
            ./pact/bin/pact-broker record-deployment --pacticipant=$CIRCLE_PROJECT_REPONAME --version=$CIRCLE_SHA1 --environment=staging

  can-i-deploy-prod:
    executor: docker
    steps:
      - download-pact-cli
      - run:
          name: Can I deploy to prod?
          command: |
            ./pact/bin/pact-broker can-i-deploy --pacticipant=$CIRCLE_PROJECT_REPONAME --version=$CIRCLE_SHA1 --to-environment=prod

  deploy-to-prod:
    executor: docker
    steps:
      - run:
          name: Deploy to prod
          command: |
            echo "Simulating deploying to prod environment"
            ./pact/bin/pact-broker record-deployment --pacticipant=$CIRCLE_PROJECT_REPONAME --version=$CIRCLE_SHA1 --environment=prod

workflows:
  version: 2

  pact-provider-webhook-workflow:
    when: << pipeline.parameters.pact-webhook >>
    jobs:
      - build-pact-provider-only

  main-workflow:
    when:
      not: << pipeline.parameters.pact-webhook >>
    jobs:
      - build
      - can-i-deploy:
          requires:
            - build
      - can-i-deploy-dev:
          requires:
            - can-i-deploy
      - deploy-to-dev:
          requires:
            - can-i-deploy-dev
          filters:
            branches:
              only:
                - main
      - approval-deploy-to-staging:
          type: approval
          requires:
            - deploy-to-dev
          filters:
            branches:
              only:
                - main
      - can-i-deploy-staging:
          requires:
            - approval-deploy-to-staging
          filters:
            branches:
              only:
                - main
      - deploy-to-staging:
          requires:
            - can-i-deploy-staging
          filters:
            branches:
              only:
                - main
      - approval-deploy-to-prod:
          type: approval
          requires:
            - deploy-to-staging
          filters:
            branches:
              only:
                - main
      - can-i-deploy-prod:
          requires:
            - approval-deploy-to-prod
          filters:
            branches:
              only:
                - main
      - deploy-to-prod:
          requires:
            - can-i-deploy-prod
          filters:
            branches:
              only:
                - main